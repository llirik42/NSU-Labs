import expression;
import simplification;

export {
    Fraction : (n: Exp, d: Exp);

    toRationalFunction(e: Exp) -> Fraction;

    getFractionRepr(f: Fraction) -> string;
}

toRationalFunction(e: Exp) -> Fraction {
    tmp: Fraction = switch(e) {
        Binary(l, r, op): {
            lf: Fraction = toRationalFunction(l);
            rf: Fraction = toRationalFunction(r);
            switch(op) {
                AddOp(): Fraction(simplifiedAdd(mul(lf.n, rf.d), simplifiedMul(rf.n, lf.d)), simplifiedMul(lf.d, rf.d));
                SubOp(): Fraction(simplifiedSub(mul(lf.n, rf.d), simplifiedMul(rf.n, lf.d)), simplifiedMul(lf.d, rf.d));
                MulOp(): Fraction(simplifiedMul(lf.n, rf.n), simplifiedMul(lf.d, rf.d));
                DivOp(): Fraction(simplifiedMul(lf.n, rf.d), simplifiedMul(lf.d, rf.n));
            };
        }
        default: Fraction(e, Int(1));
    }

    Fraction(simplify(tmp.n), simplify(tmp.d));
}

getFractionRepr(f: Fraction) -> string {
    getRepr(f.n) + " / " + getRepr(f.d);
}
