import vm_grammar;

export {
    execute(program : VMProgram) -> void;
}

MemoryState : (vars : Tree<string, Const>);
State : (memoryState : MemoryState, nextLabel : int);

NoValue : ();
NumericConst ::= IntConst, RealConst;
ExprValue ::= NoValue, Const;

updateMemoryState(memoryState : MemoryState, varName : string, newValue : Const) -> MemoryState {
    MemoryState(setTree(memoryState.vars, varName, newValue));
}


// Utils
findAllAcc(a : [?], fn : (?) -> bool, acc : [?]) -> [?] {
    index = findi(a, fn);
    eitherMap(
        index,
        \i -> concat3([a[i]], acc, findAllAcc(tailFrom(a, i + 1), fn, acc)),
        acc
    );
}

findAll(a : [?], fn : (?) -> bool) -> [?] {    
    findAllAcc(a, fn, []);
}


getVarValue(varName : string, memoryState : MemoryState) -> ExprValue {
    // It is guaranteed that all variables have value so really we don't need default value, but we must specify one    
    lookupTreeDef(memoryState.vars, varName, NoValue());
}


executeNumericOperation(c : NumericConst, intOp : (int) -> ExprValue, realOp : (double) -> ExprValue) -> ExprValue {
    switch (c) {
        IntConst(v) : intOp(v);
        RealConst(v) : realOp(v);
    }
}

executeBinaryNumericOperation(
    c1 : NumericConst,
    c2 : NumericConst,
    intOp : (int, int) -> ExprValue,
    realOp : (double, double) -> ExprValue) -> ExprValue {
    
    switch (c1) {
        IntConst(v1) : {
            switch (c2) {
                IntConst(v2) : intOp(v1, v2);
                default : NoValue();
            }
        }

        RealConst(v1) : {
            switch (c2) {
                RealConst(v2) : realOp(v1, v2);
                default : NoValue();
            }
        }
    }
}

executeNumericAdd(c1 : NumericConst, c2 : NumericConst) -> ExprValue {
    executeBinaryNumericOperation(
        c1,
        c2,
        \x, y -> IntConst(x + y),
        \x, y -> RealConst(x + y)
    );
}

executeNumericSub(c1 : NumericConst, c2 : NumericConst) -> ExprValue {
    executeBinaryNumericOperation(
        c1,
        c2,
        \x, y -> IntConst(x - y),
        \x, y -> RealConst(x - y)
    );
}

executeNumericMul(c1 : NumericConst, c2 : NumericConst) -> ExprValue {
    executeBinaryNumericOperation(
        c1,
        c2,
        \x, y -> IntConst(x * y),
        \x, y -> RealConst(x * y)
    );
}

executeNumericDiv(c1 : NumericConst, c2 : NumericConst) -> ExprValue {    
    executeBinaryNumericOperation(
        c1,
        c2,
        \x, y -> {
            if (y == 0) {
                NoValue();
            } else {
                IntConst(x / y);
            }
        },
        \x, y -> RealConst(x / y)
    );
}

calculateValueOfArithmExpr(expr : ArithmExpr, memoryState : MemoryState) -> ExprValue {
    binaryArithmOp2Func = \op -> {
        switch (op) {
            ArithmAddOp() : executeNumericAdd;
            ArithmSubOp() : executeNumericSub;
            ArithmMulOp() : executeNumericMul;
            ArithmDivOp() : executeNumericDiv;
        }
    };

    switch (expr) {
        ArithmNeg(e) : {
            val = calculateValueOfExpr(e, memoryState);
            switch (val) {
                NumericConst() : executeNumericOperation(val, \i -> IntConst(-i), \r -> RealConst(-r));
                default : NoValue();
            }
        }

        ArithmBinary(l, r, op): {
            lVal = calculateValueOfExpr(l, memoryState);
            rVal = calculateValueOfExpr(r, memoryState);

            switch (lVal) {
                NumericConst() : {
                    switch (rVal) {
                        NumericConst() : binaryArithmOp2Func(op)(lVal, rVal);
                        default : NoValue();
                    }
                }
                
                default : NoValue();
            }
        }        
    }
}


updateArray(array : ArrayConst, ind : ExprValue, val : ExprValue) -> ExprValue {
    switch (ind) {
        IntConst(i) : {
            switch (val) {
                // Types were checked during compilation. So "val" has appropriate type for "array" and it has value 
                Const() : {
                    ArrayConst(setTree(array.values, i, val));
                }
                
                default : NoValue();
            }
        }

        default : NoValue();
    }
}

applyArray(array : ArrayConst, ind : ExprValue) -> ExprValue {
    switch (ind) {
        IntConst(i) : {
            lookupTreeDef(array.values, i, NoValue());
        }

        default : NoValue();
    }
}

concatArrays(a1 : ArrayConst, a2 : ArrayConst) -> ExprValue {
    // We cannot just do ArrayConst(mergeTree(a1.values, a2.values)), because when we do it, result of merging [1, 2] and [3, 4] would be [3,4].

    l1 = lengthOfArray(a1);

    treeOfResult = foldTree(a2.values, a1.values, \k, v, acc -> {
        setTree(acc, k + l1, v);
    });

    ArrayConst(treeOfResult);
}

lengthOfArray(arr : ArrayConst) -> int {
    switch (popmax(arr.values)) {
        EmptyPopResult() : 0;
        PopResult(k, v, rest) : k + 1;
    }
}

calculateValueOfArrayOp(arrayOp : ArrayOp, memoryState : MemoryState) -> ExprValue {
    arrValue = calculateValueOfExpr(arrayOp.arr, memoryState);

    switch (arrValue) {
        ArrayConst(values) : {
            switch (arrayOp.opType) {
                ArrayUpdateOpType(ind, expr) : {
                    indVal = calculateValueOfExpr(ind, memoryState);
                    exprVal = calculateValueOfExpr(expr, memoryState);
                    updateArray(arrValue, indVal, exprVal);
                }

                ArrayApplyOpType(ind) : {
                    indVal = calculateValueOfExpr(ind, memoryState);
                    applyArray(arrValue, indVal);
                }

                ArrayConcatOpType(arr2) : {
                    array2Val = calculateValueOfExpr(arr2, memoryState);
                    switch (array2Val) {
                        ArrayConst(values2) : concatArrays(arrValue, array2Val);
                        default : NoValue();
                    }
                }

                ArrayLengthOpType() : IntConst(lengthOfArray(arrValue));
            }
        }

        default : NoValue();
    }
}


compareConstants(c1 : ExprValue, c2 : ExprValue, intCmp : (int, int) -> bool, realCmp : (double, double) -> bool) -> ExprValue {
    switch (c1) {
        IntConst(v1) : {
            switch (c2) {
                IntConst(v2) : BoolConst(intCmp(v1, v2));
                default : NoValue();
            }
        }

        RealConst(v1) : {
            switch (c2) {
                RealConst(v2) : BoolConst(realCmp(v1, v2));
                default : NoValue();
            }
        }

        default : NoValue();
    }
}

equalConstants(c1 : ExprValue, c2 : ExprValue) -> ExprValue {
    compareConstants(
        c1,
        c2,
        \x, y -> x == y,
        \x, y -> x == y
    );
}

lessConstants(c1 : ExprValue, c2 : ExprValue) -> ExprValue {
    compareConstants(
        c1,
        c2,
        \x, y -> x < y,
        \x, y -> x < y
    );
}

executeBoolOperation(c : ExprValue, op : (bool) -> bool) -> ExprValue {
    switch (c) {
        BoolConst(v) : BoolConst(op(v));
        default : NoValue();
    }
}

executeBinaryBoolOperation(c1 : ExprValue, c2 : ExprValue, op : (bool, bool) -> bool) -> ExprValue {
    switch (c1) {
        BoolConst(v1) : {
            switch (c2) {
                BoolConst(v2) : BoolConst(op(v1, v2));
                default : NoValue();
            }
        }

        default : NoValue();
    }
}

calculateValueOfBooleanExpr(expr : BooleanExpr, memoryState : MemoryState) -> ExprValue {
    comparisonType2Func = \t -> {
        switch (t) {
            Equal() : equalConstants;
            Less() : lessConstants;
        }
    }
    
    switch (expr) {
        Comparison(l, r, comparisonType) : {
            lValue = calculateValueOfExpr(l, memoryState);
            rValue = calculateValueOfExpr(r, memoryState);
            comparisonType2Func(comparisonType)(lValue, rValue);
        }

        Not(e) : {
            eValue = calculateValueOfBooleanExpr(e, memoryState);
            executeBoolOperation(eValue, \v -> !v);            
        }

        Or(l, r) : {
            lValue = calculateValueOfBooleanExpr(l, memoryState);
            rValue = calculateValueOfBooleanExpr(r, memoryState);
            executeBinaryBoolOperation(lValue, rValue, \x, y -> x || y);
        }

        BoolConst(value) : expr;
    }
}


calculateValueOfExpr(expr : Expr, memoryState : MemoryState) -> ExprValue {
    switch (expr) {
        Var(name) : getVarValue(name, memoryState);
        ArithmExpr() : calculateValueOfArithmExpr(expr, memoryState);
        ArrayOp(arr, opType) : calculateValueOfArrayOp(expr, memoryState);
        BooleanExpr() : calculateValueOfBooleanExpr(expr, memoryState);
        NonBoolConst() : expr;
    }
}


getInitValue(varType : VarType) -> Const {
    switch (varType) {
        Int() : IntConst(0);
        String() : StringConst("");
        Bool() : BoolConst(false);
        Real() : RealConst(0.0);
        Array(baseType) : ArrayConst(makeTree());
    }
}

createInitState(program : VMProgram) -> State {
    initMemoryState = MemoryState(fold(
        program.varDeclList.elements,
        makeTree(),
        \acc, decl -> setTree(
            acc,
            decl.name,
            getInitValue(decl.type)
        )
    ));
    
    State(initMemoryState, 0);
}


createStates(memoryState : MemoryState, labels : [int]) -> Set<State> {
    fold(
        labels,
        makeSet(),
        \acc, l -> insertSet(acc, State(memoryState, l))
    );
}

executeAssignment(state : State, operation : AssignmentOperation) -> Set<State> {
    exprValue = calculateValueOfExpr(operation.expr, state.memoryState);
    
    switch (exprValue) {        
        // Types were checked during compilation and we don't have to check them here
        Const() : {
            newMemoryState = updateMemoryState(state.memoryState, operation.varName, exprValue);
            createStates(newMemoryState, operation.labels);
        }

        // Expression in assignment isn't correct. Example: "x := 1 / 0;"
        default() : makeSet();
    }
}

executeTest(state : State, operation : TestOperation) -> Set<State> {
    condValue = calculateValueOfExpr(operation.cond, state.memoryState);
    
    switch (condValue) {
        BoolConst(value) : {
            gotoLabels = if (value) operation.ifLabels else operation.elseLabels;
            createStates(state.memoryState, gotoLabels);
        }

        // Condition isn't correct. Example: "(1 / 0 < 3)?;"
        default : makeSet();
    }

}

executePrint(state : State, operation : PrintOperation) -> Set<State> {
    exprValue = calculateValueOfExpr(operation.expr, state.memoryState);

    switch (exprValue) {
        Const() : {
            constRepr = const2s(exprValue);
            println(constRepr);
            createStates(state.memoryState, operation.labels);
        }

        // Expression to print isn't correct. Example: "PRINT(1 / 0);"
        NoValue() : makeSet();
    }
}

executeOperation(state : State, operation : Operation) -> Set<State> {
    memoryState = state.memoryState;
    
    switch (operation) {
        AssignmentOperation(varName, expr, labels) : executeAssignment(state, operation);

        TestOperation(cond, ifLabels, elseLabels) : executeTest(state, operation);
        
        PrintOperation(expr, labels) : executePrint(state, operation);
    }   
}

moveState(state : State, operators : [Operator]) -> Set<State> {
    nextLabel = state.nextLabel;
    nextOperators = findAll(operators, \op -> op.label == nextLabel);

    fold(
        nextOperators,
        makeSet(),
        \acc, op -> mergeSets(acc, executeOperation(state, op.operation))
    );
}

moveStates(states : Set<State>, operators : [Operator]) -> Set<State> {
    if (isEmptySet(states)) {
        makeSet();
    } else {
        statesOfNextStep = foldSet(
            states,
            makeSet(),
            \acc, s -> {
                mergeSets(acc, moveState(s, operators))
            }
        );
        
        moveStates(statesOfNextStep, operators);
    }
}

executeProgram(initState : State, program : VMProgram) -> void {
    moveStates(makeSet1(initState), program.operators);
    nop();
}

execute(program : VMProgram) -> void {
    initState = createInitState(program);
    executeProgram(initState, program);
}
