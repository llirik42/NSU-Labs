import algorithms;
import nemo_grammar;

export {
    AssignmentOperation : (varName : string, expr : Expr, labels : [int]);
    TestOperation : (cond : BooleanExpr, ifLabels : [int], elseLabels : [int]);
    PrintOperation : (expr : Expr, labels : [int]);
    Operation ::= AssignmentOperation, TestOperation, PrintOperation;
    
    Operator : (label : int, operation : Operation);    
    sortOperators(operators : [Operator]) -> [Operator];
    operator2s(operator : Operator) -> string;
    
    VMProgram : (varDeclList : VarDeclList, operators : [Operator]); // operators are supposed to be ordered
}

sortOperators(operators : [Operator]) -> [Operator] {
    mergeSort(operators, \o1, o2 -> {
        l1 = o1.label;
        l2 = o2.label;
        l1 - l2;
    });
}

labels2s(labels : [int]) -> string {
    labelsListRepr = foldi(
        sort(labels),
        "",
        \i, acc, e -> {
            tmp = acc + i2s(e);
            
            if (i == length(labels) - 1) {
                tmp;
            } else {
                tmp + ", ";
            }
        }
    );

    "{" + labelsListRepr + "}";
}

operation2s(operation : Operation) -> string {
    switch (operation) {
        AssignmentOperation(varName, expr, labels) : varName + " := " + expr2s(expr) + " goto " + labels2s(labels);
        TestOperation(cond, ifLabels, elseLabels) : "if (" + expr2s(cond) + ") then " + labels2s(ifLabels) + " else " + labels2s(elseLabels);
        PrintOperation(expr, labels) : "print " + expr2s(expr) + " goto " + labels2s(labels);
    }
}

operator2s(operator : Operator) -> string {
    i2s(operator.label) + ": " + operation2s(operator.operation) + ";";    
}

