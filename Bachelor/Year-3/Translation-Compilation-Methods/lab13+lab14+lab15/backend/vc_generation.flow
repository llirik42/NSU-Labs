import frontend/logic_building;
import grammar;
import ds/set;

export {
    generateVC(program : AnnotatedNemoProgram) -> BooleanExpr;
}

condsArrayToCond(conds : [BooleanExpr]) -> BooleanExpr {
    if (length(conds) == 0) {
        BoolConst(true);
    } else {
        fold(tail(conds), conds[0], \acc, c -> buildLogicAnd(acc, c));
    }
}

condsSetToCond(conds : Set<BooleanExpr>) -> BooleanExpr {
    condsArrayToCond(set2array(conds));
}

replaceVarInArithmExpr(expr : ArithmExpr, varName : string, destination : Expr) -> ArithmExpr {
    switch (expr) {
        ArithmBinary(l, r, op) : ArithmBinary(
            replaceVarInExpr(l, varName, destination),
            replaceVarInExpr(r, varName, destination),
            op
        );

        ArithmNeg(e) : ArithmNeg(replaceVarInExpr(e, varName, destination));
    }
}

replaceVarInBooleanExpr(expr : BooleanExpr, varName : string, destination : Expr) -> BooleanExpr {
    switch (expr) {
        Comparison(l, r, cmpType) : Comparison(
            replaceVarInExpr(l, varName, destination),
            replaceVarInExpr(r, varName, destination),
            cmpType
        );

        Not(e) : Not(replaceVarInBooleanExpr(e, varName, destination));

        Or(l, r) : Or(
            replaceVarInBooleanExpr(l, varName, destination),
            replaceVarInBooleanExpr(r, varName, destination)
        );

        BoolConst(value) : expr;
    }
}

replaceVarsInArrayOp(expr : ArrayOp, varName : string, destination : Expr) -> ArrayOp {
    newArrayOpType = switch (expr.opType) {
        ArrayUpdateOpType(ind, val) : ArrayUpdateOpType(
            replaceVarInExpr(ind, varName, destination),
            replaceVarInExpr(val, varName, destination)
        );

        ArrayApplyOpType(ind) : ArrayApplyOpType(replaceVarInExpr(ind, varName, destination));

        ArrayConcatOpType(arr2) : ArrayConcatOpType(replaceVarInExpr(arr2, varName, destination));
        
        ArrayLengthOpType() : ArrayLengthOpType();
    }
    
    ArrayOp(
        replaceVarInExpr(expr.arr, varName, destination),
        newArrayOpType
    );
}

replaceVarInExpr(expr : Expr, varName : string, destination: Expr) -> Expr {
    switch (expr) {
        Var(name) : {
            if (name == varName) {
                destination;
            } else {
                expr;
            }
        }

        ArithmExpr() : replaceVarInArithmExpr(expr, varName, destination);

        ArrayOp(arr, opType) : replaceVarsInArrayOp(expr, varName, destination);

        BooleanExpr() : replaceVarInBooleanExpr(expr, varName, destination);
    
        NonBoolConst() : expr;
    }
}

generateVCFromAssigmnent(assignment : Assignment, preCond : BooleanExpr, postCond : BooleanExpr) -> Set<BooleanExpr> {        
    makeSet1(
        buildLogicImplication(
            preCond,
            replaceVarInBooleanExpr(
                postCond,
                assignment.varName,
                assignment.expr
            )
        )
    ); 
}

generateVCFromBodiesSeq(bodiesSeq : BodiesSeq, preCond : BooleanExpr, postCond : BooleanExpr) -> Set<BooleanExpr> {
    bodies = bodiesSeq.bodies;

    if (length(bodies) == 0) {
        makeSet1(buildLogicImplication(preCond, postCond));
    } else {
        generateVCFromBodyConds(
            bodies[0],
            preCond,
            generateVCFromBody(
                BodiesSeq(tail(bodies)),
                BoolConst(true),
                postCond
            )
        );
    }
}

generateVCFromTest(test : Test, preCond : BooleanExpr, postCond : BooleanExpr) -> Set<BooleanExpr> {
    makeSet1(
        buildLogicImplication(
            preCond,
            buildLogicImplication(
                test.be, 
                postCond
            )
        )
    );
}

generateVCFromPrint(print : Print, preCond : BooleanExpr, postCond : BooleanExpr) -> Set<BooleanExpr> {    
    makeSet1(
        buildLogicImplication(
            preCond, 
            postCond
        )
    );
}

generateVCFromChoice(choice : UDChoice, preCond : BooleanExpr, postCond : BooleanExpr) -> Set<BooleanExpr> {        
    fold(
        choice.bodies,
        makeSet(),
        \acc, b -> mergeSets(
            acc,
            generateVCFromBody(
                b,
                preCond,
                postCond
            )
        )
    );
}

generateVCFromIteration(iteration : AnnotatedUDIteration, preCond : BooleanExpr, postCond : BooleanExpr) -> Set<BooleanExpr> {
    inv = iteration.invariant;
    
    mergeSets(
        makeSet1(
            buildLogicImplication(
                inv,
                postCond
                )
        ),
        generateVCFromBody( 
            iteration.body,
            preCond, 
            inv
        )
    );
}

generateVCFromBodyConds(body : Body, preCond : BooleanExpr, postConds : Set<BooleanExpr>) -> Set<BooleanExpr> {
    postCond = condsSetToCond(postConds);
    
    switch (body) {
        Assignment(varName, expr) : generateVCFromAssigmnent(body, preCond, postCond);
    
        BodiesSeq(bodies) : generateVCFromBodiesSeq(body, preCond, postCond);

        Test(cond) : generateVCFromTest(body, preCond, postCond);

        Print(expr) : generateVCFromPrint(body, preCond, postCond);

        UDChoice(bodies) : generateVCFromChoice(body, preCond, postCond);

        AnnotatedUDIteration(iterationBody, invariant) : generateVCFromIteration(body, preCond, postCond);
    }
}

generateVCFromBody(body : Body, preCond : BooleanExpr, postCond : BooleanExpr) -> Set<BooleanExpr> {
    generateVCFromBodyConds(body, preCond, makeSet1(postCond));
}

generateVC(program : AnnotatedNemoProgram) -> BooleanExpr {
    annotatedBody = program.body;
    setOfVC = generateVCFromBody(annotatedBody.body, annotatedBody.preCond, annotatedBody.postCond);
    condsSetToCond(setOfVC);
}
