import frontend/logic_building;
import grammar;
import lingo/pegcode/driver;

export {
    parse(programString: string) -> flow;
}

buildVarDecls(a : [flow]) {
    VarDeclList(a[0]);
}

buildTrueConst(a : [flow]) {
    BoolConst(true);
}

buildFalseConst(a : [flow]) {
    BoolConst(false);
}

buildArrayConst(a : [flow]) {
    if (length(a) == 0) {
        ArrayConst(makeTree());
    } else {
        values = concat(a[0], a[1]);
        treeOfValues = foldi(values, makeTree(), \i, acc, v -> setTree(acc, i, v));
        ArrayConst(treeOfValues);
    }
}

buildArithmSub(a : [flow]) {
    fold(a[1], a[0], \acc, e -> ArithmBinary(acc, e, ArithmSubOp()))
}

buildArithmDiv(a : [flow]) {
    fold(a[1], a[0], \acc, e -> ArithmBinary(acc, e, ArithmDivOp()))
}

buildLess_(e1 : Expr, e2 : Expr) {
    Comparison(e1, e2, Less());
}

buildEqual_(e1 : Expr, e2 : Expr) {
    Comparison(e1, e2, Equal());
}

buildLess(a : [flow]) {
    buildLess_(a[0], a[1]);
}

buildEqual(a : [flow]) {
    buildEqual_(a[0], a[1]);
}

buildLessOrEqual(a : [flow]) {
    t1 = a[0];
    t2 = a[1];
    Or(buildEqual_(t1, t2), buildLess_(t1, t2));
}

buildGreater(a : [flow]) {
    buildLess_(a[1], a[0]);
}

buildGreaterOrEqual(a : [flow]) {
    t1 = a[0];
    t2 = a[1];
    Or(buildEqual_(t1, t2), buildLess_(t2, t1));
}

buildNotEqual(a : [flow]) {
    Not(buildEqual_(a[0], a[1]));
}

buildAnd(a : [flow]) {
    buildLogicAnd(a[0], a[1]);
}

buildBodiesSeq(a : [flow]) {
    BodiesSeq(a[0]);
}

buildUDChoice(a : [flow]) {
    UDChoice(concat([a[0]], a[1]));
}

specialPegActions = {
    actions : [Pair<string, ([flow]) -> flow>] = [
        Pair("buildVarDecls", buildVarDecls),
        Pair("buildTrueConst", buildTrueConst),
        Pair("buildFalseConst", buildFalseConst),
        Pair("buildArrayConst", buildArrayConst),
        Pair("buildArithmSub", buildArithmSub),
        Pair("buildArithmDiv", buildArithmDiv),
        Pair("buildLess", buildLess),
        Pair("buildEqual", buildEqual),
        Pair("buildLessOrEqual", buildLessOrEqual),
        Pair("buildGreater", buildGreater),
        Pair("buildGreaterOrEqual", buildGreaterOrEqual),
        Pair("buildNotEqual", buildNotEqual),
        Pair("buildAnd", buildAnd),
        Pair("buildBodiesSeq", buildBodiesSeq),
        Pair("buildUDChoice", buildUDChoice),
    ];

    SemanticActions(fold(
        actions, defaultPegActions.t, \acc, p -> {
            setTree(acc, p.first, p.second);
        }
    ));
}

parse(programString: string) -> flow {
    grammar = compilePegGrammar("#include lingo/grammar.lingo");
    parsic(grammar, programString, specialPegActions);
}
