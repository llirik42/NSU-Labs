import string;
import lingo/pegcode/driver;


Exp ::= Add, Mul, Int;
Add : (e1 : Exp, e2 : Exp);
Mul : (e1 : Exp, e2 : Exp);
Int : (i : int);

getValue(e: Exp) -> int {
    switch(e) {
        Add(e1, e2): getValue(e1) + getValue(e2);
        Mul(e1, e2): getValue(e1) * getValue(e2);
        Int(i): i;
    }
}

getRepr(e: Exp) -> string {
    switch(e) {
        Add(e1, e2): "(" + getRepr(e1) + " + " + getRepr(e2) + ")";
        Mul(e1, e2): "(" + getRepr(e1) + " * " + getRepr(e2) + ")";
        Int(i): i2s(i);
    }
}

grammar = compilePegGrammar("#include lingo/lab5.lingo");

main() {
    tests: [Pair<string, int>] = [
        Pair(" 1 ", 1),
        Pair(" 12 ", 12),
        Pair(" ( 4 ) ", 4),
        Pair(" ( 42 ) ", 42),
        Pair(" 1 + 2 ", 3),
        Pair(" 1 + 2 + 3 ", 6),
        Pair(" 1 + 2 + 3 + 4 ", 10),
        Pair(" ( 1 + 2 ) ", 3),
        Pair(" ( 1 + 2 ) + 3 ", 6),
        Pair(" 1 + ( 2 + 3 ) ", 6),
        Pair(" 1 + ( 2 + 3 ) + 4 ", 10),
        Pair(" 1 + ( 2 + ( 3 + 4 ) ) ", 10),
        Pair(" 7 * 2 ", 14),
        Pair(" 1 * 2 * 3 ", 6),
        Pair(" 5 * 2 * 3 * 4 ", 120),
        Pair(" ( 1 + 2 ) * 3 ", 9),
        Pair(" 1 + 2  * 3 ", 7),
        Pair(" ( 1 * 2 ) * 3 ", 6),
        Pair(" 5 * ( 2 * 3 ) ", 30),
        Pair(" 5 * ( 2 * 3 ) * 4 ", 120),
        Pair(" 4 * ( 2 + 3 ) ", 20),
        Pair(" 1 + ( 2 + 3 ) * 4 ", 21),
        Pair(" ( 1 + 2 ) * ( 3 + 4 ) * ( 5 + 6 ) ", 231),
        Pair(" 1 * 0 ", 0),
        Pair(" 0 + 0 ", 0),
        Pair(" 6 * ( 2 + 3 ) + 5 * ( 4 + 7 ) * 9 ", 525),
        Pair(" 2 + 3 * 4 ", 14),
        Pair(" 1 + 2 + 3 + 4 + 5 + 6 + ( 1 + 2 ) * 2 + ( 9 * 7 + 1 ) * 18 + 100 * ( 9 + ( 1 + 2 * 4 ) ) ", 2979),
        Pair(" Incorrect string ", 0)
    ];
   
    fori(0, length(tests) - 1, \i -> {
        str: string = tests[i].first;
        expression = parsic(grammar, str, defaultPegActions);
        
        if (expression != flow("PARSING FAILED") && getValue(expression) != tests[i].second) {
            println(str + "     ->    " + getRepr(expression));
            value: int = getValue(expression);
            println("Value=" + i2s(value));
            println("Expected=" + i2s(tests[i].second));
            println("\n");
        }
    });

    quit(0);
}
