import expression;
import quotient;
import ds/set;
import rule;
import expressions_set;

export {
    simplify(e: Exp, rules: Set<SimplificationRule>) -> Exp;
}

Context : (rules: Set<SimplificationRule>);

makeContext(rules: Set<SimplificationRule>) -> Context {
    Context(rules);
}

doConstantFolding(e: Exp) -> Exp {
    switch(e) {
        Neg(e1): {
            v = getValue(e1);
            if (v != nan()) {
                Const(mulQuotients(intQuotient(-1), v));
            } else {
                Neg(doConstantFolding(e1));
            }
        }
        Binary(l, r, op):  {
            lv = getValue(l);
            rv = getValue(r);
            if (lv != nan() && rv != nan()) {
                result = switch(op) {
                    AddOp() : addQuotients(lv, rv);
                    SubOp() : subQuotients(lv, rv); 
                    MulOp() : mulQuotients(lv, rv);
                    DivOp() : divQuotients(lv, rv);
                }

                Const(result);
            } else {
                Binary(doConstantFolding(l), doConstantFolding(r), op);
            }
        }
        default: e;
    }
}

findAllBinaryExpressions(a1: [Exp], a2: [Exp], op: BinaryOp) -> [Exp] {
    fold(a1, [], \acc1, e1 -> {
        tmp = fold(a2, [], \acc2, e2 -> {
            arrayPush(acc2, Binary(e1, e2, op));
        });
        concat(acc1, tmp);
    });
}

findAllNegExpressions(es: [Exp]) -> [Exp] {
    map(es, \e -> Neg(e));
}

findAllFormsWithSimplifiedParts(e: Exp, ctx: Context) -> [Exp] {
    switch(e) {
            Neg(e1): {
                operandSmallestForms = findAllSmallestFormsByContext(e1, ctx);
                findAllNegExpressions(operandSmallestForms);
            }
            
            Binary(l, r, op): {
                leftOperandSmallestForms = findAllSmallestFormsByContext(l, ctx);
                rightOperandSmallestForms = findAllSmallestFormsByContext(r, ctx);
                findAllBinaryExpressions(leftOperandSmallestForms, rightOperandSmallestForms, op);
            }

            // We cannot simplify terminal symbols (constants and variables)
            default: [e];
        }
}

findAllSmallestFormsFold(foundForms: ExpressionsSet, ctx: Context) -> [Exp] {        
    if (hasNextElement(foundForms)) {
        currentExp = getCurrentElement(foundForms);

        tmp1 = findAllFormsWithSimplifiedParts(currentExp, ctx);

        tmp2 = fold(tmp1, foundForms, \s, e -> tryToAppendElement(s, e));

        newFoundForms = foldSet(ctx.rules, tmp2, \acc, r -> {
            newForm = tryToApplyRule(currentExp, r);
            eitherMap(newForm, \f -> tryToAppendElement(acc, doConstantFolding(f)), acc);
        });

        findAllSmallestFormsFold(newFoundForms, ctx);
    } else {
        foundForms.elements;
    }
}

findAllSmallestForms(es: [Exp], ctx: Context) -> [Exp] {
    findAllSmallestFormsFold(makeExpressionsSet(es), ctx);
}

findAllSmallestFormsOfBinary(leftOperandSmallestForms: [Exp], rightOperandSmallestForms: [Exp], op: BinaryOp, ctx: Context) -> [Exp] {
    allBinaryExpressions = findAllBinaryExpressions(leftOperandSmallestForms, rightOperandSmallestForms, op);        
    findAllSmallestForms(allBinaryExpressions, ctx);
}

findAllSmallestFormsOfNeg(operandSmallestForms: [Exp], ctx: Context) -> [Exp] {
    allNegExpressions = findAllNegExpressions(operandSmallestForms);
    findAllSmallestForms(allNegExpressions, ctx);
}

findAllSmallestFormsByContext(e: Exp, ctx: Context) -> [Exp] {
    findAllSmallestForms(findAllFormsWithSimplifiedParts(e, ctx), ctx);
}

simplify(e: Exp, rules: Set<SimplificationRule>) -> Exp {    
    e1 = doConstantFolding(e);

    ctx = makeContext(rules);
    allSmallestForms = findAllSmallestFormsByContext(e1, ctx);
    e2 = allSmallestForms[length(allSmallestForms) - 1];

    doConstantFolding(e2);
}
