import expression;
import parsing;
import simplification;
import rule;

main() {
    grammar = "#include lingo/grammar.lingo";
    rulesStr = "#include lingo/rules.txt";

    tests = [
        /*1*/ " 1 ",
        /*2*/ " -1 ",
        /*3*/ " 0 ",
        /*4*/ " -0 ",
        /*5*/ " 1 + 2 ",
        /*6*/ " 1 + 2 -3 * 4 / 5 + (9 / 13) - 0/4 * 8 ",
        /*7*/ " x ",
        /*8*/ " x + -x ",
        /*9*/ " -x + x ",
        /*10*/ " x - x ",
        /*11*/ " x + 0 ",
        /*12*/ " 0 + x ",
        /*13*/ " x - 0 ",
        /*14*/ " 0 - x ",
        /*15*/ " x * 1 ",
        /*16*/ " 1 * x ",
        /*17*/ " x * 0 ",
        /*18*/ " 0 * x ",
        /*19*/ " 0 * 13 ",
        /*20*/ " 0 * -10 ",
        /*21*/ " 2 * x + x * 3 ",
        /*22*/ " x * 2 + 3 * x ",
        /*23*/ " x + x * 3 ",
        /*24*/ " 3 * x + x ",
        /*25*/ " 3 * x - x ",
        /*26*/ " -x + 3 * x ",
        /*27*/ " a * x + x * b ",
        /*28*/ " a * x - x * b ",
        /*29*/ " a * x + x * b - c * x ",
        /*30*/ " x / x ",
        /*31*/ " -x / x ",
        /*32*/ " x / (-x) ",
        /*33*/ " x * (1/x) ",
        /*34*/ " -x * (1/x) ",
        /*35*/ " -x * (-1/x) ",
        /*36*/ " (-a) * (-b) ",
        /*37*/ " (-a) / (-b) ",
        /*38*/ " x * x * y + y * x ",
        /*39*/ " x * y + y * x ",
        /*40*/ " a * x + x * b + c ",
        /*41*/ " x + x ",
        /*42*/ " (a + b + c) / (a + b + c) ",
        /*43*/ " x + a - x ",
        /*44*/ " x -x + a ",
        /*45*/ " a + x - x ",
        /*46*/ " a + x - x ",
        /*47*/ " (a * b) / (b * c) ",
        /*48*/ " x / x + 13 ",
        /*49*/ " -(-x) ",
        /*50*/ " -(x - y) ",
        /*51*/ " x - a * x ",
        /*52*/ " a * x - x ",
        /*53*/ " (x / y) * y ",
        /*54*/ " -(x + y) ",
    ];

    rules = parse(rulesStr, grammar);

    fori(0, length(tests) - 1, \i -> {
        str = tests[i];

        expression = parse(str, grammar);
        if (expression != makeSet()) {
            simplified = simplify(expression, rules);
            repr = getRepr(simplified);
            println("Test " + i2s(i + 1));
            println(getRepr(expression));
            println(getRepr(simplified));
            println("\n");
        }
    });

    quit(0);
}
