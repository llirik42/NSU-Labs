import expression;

export {
    ExpressionsSet : (elements: [Exp], elementsSize: int, currentElementIndex: ref int);

    makeExpressionsSet(elements: [Exp]) -> ExpressionsSet;

    makeExpressionsSet1(element: Exp) -> ExpressionsSet;

    getElement(es: ExpressionsSet, index: int) -> Exp;

    getFirstElement(es: ExpressionsSet) -> Exp;

    getCurrentElement(es: ExpressionsSet) -> Exp;

    hasNextElement(es: ExpressionsSet) -> bool;

    tryToAppendElement(es: ExpressionsSet, element: Exp) -> ExpressionsSet;
}

makeExpressionsSet(elements: [Exp]) -> ExpressionsSet {
    fold(tail(elements), makeExpressionsSet1(elements[0]), tryToAppendElement);
}

makeExpressionsSet1(element: Exp) -> ExpressionsSet {
    ExpressionsSet([element], getSize(element), ref 0);
}

getElement(es: ExpressionsSet, index: int) -> Exp {
    es.elements[index];
}

getFirstElement(es: ExpressionsSet) -> Exp {
    getElement(es, 0);
}

getCurrentElement(es: ExpressionsSet) -> Exp {
    result = getElement(es, ^(es.currentElementIndex));
    es.currentElementIndex := ^(es.currentElementIndex) + 1;
    result;
}

hasNextElement(es: ExpressionsSet) -> bool {
    ^(es.currentElementIndex) < length(es.elements);
}

tryToAppendElement(es: ExpressionsSet, element: Exp) -> ExpressionsSet {
    newElementSize = getSize(element);    

    if (newElementSize < es.elementsSize) {
        makeExpressionsSet1(element);
    } else if (newElementSize == es.elementsSize && !contains(es.elements, element)) {
        ExpressionsSet(arrayPush(es.elements, element), newElementSize, es.currentElementIndex);
    } else {
        es;
    }
}
