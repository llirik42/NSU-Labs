import quotient;

export {
    BinaryOp ::= AddOp, SubOp, MulOp, DivOp;
    AddOp : ();
    SubOp : ();
    MulOp : ();
    DivOp : ();

    Exp ::= Const, Int, Var, Neg, Binary;
    Int : (i : int);
    Const : (q : Quotient);
    Var : (name: string);
    Neg : (e: Exp);
    Binary : (l : Exp, r : Exp, op : BinaryOp);

    add(l: Exp, r: Exp) -> Exp;
    sub(l: Exp, r: Exp) -> Exp;
    mul(l: Exp, r: Exp) -> Exp;
    div(l: Exp, r: Exp) -> Exp;

    getRepr(e: Exp) -> string;
    getValue(e: Exp) -> Quotient;
    getSize(e: Exp) -> int;
}

add(l: Exp, r: Exp) -> Exp {
    Binary(l, r, AddOp());
}

sub(l: Exp, r: Exp) -> Exp {
    Binary(l, r, SubOp());
}

mul(l: Exp, r: Exp) -> Exp {
    Binary(l, r, MulOp());
}

div(l: Exp, r: Exp) -> Exp {
    Binary(l, r, DivOp());
}

getRepr(e: Exp) -> string {
    switch(e) {
        Int(i): i2s(i);
        Const(q): getQuotientRepr(q);
        Var(name): name;
        Neg(e1): "-" + getRepr(e1);
        Binary(l, r, op): {
            lRepr: string = getRepr(l);
            rRepr: string = getRepr(r);
            "(" + switch(op) {
                AddOp(): lRepr + " + " + rRepr;
                SubOp(): lRepr + " - " + rRepr;
                MulOp(): lRepr + " * " + rRepr;
                DivOp(): lRepr + " / " + rRepr;
            } + ")";
        }
    }
}

getValue(e: Exp) -> Quotient {
    switch(e) {
        Int(i): intQuotient(i);
        Const(q): q;
        Var(name): nan();
        Neg(e1): mulQuotients(intQuotient(-1), getValue(e1));
        Binary(l, r, op): {
            lValue: Quotient = getValue(l);
            rValue: Quotient = getValue(r);
            switch(op) {
                AddOp(): addQuotients(lValue, rValue);
                SubOp(): subQuotients(lValue, rValue);
                MulOp(): mulQuotients(lValue, rValue);
                DivOp(): divQuotients(lValue, rValue);
            };
        }
    }
}

getSize(e: Exp) -> int {
    switch(e) {
        Neg(e1): getSize(e1) + 1;
        Binary(l, r, op): getSize(l) + getSize(r) + 1;
        default: 1;
    }
}
